
1. –¢–µ—Å—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (databaseTest.js)
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MySQL —á–µ—Ä–µ–∑ Sequelize.

javascript
–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å
–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
const { Sequelize } = require('sequelize');
require('dotenv').config();

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
const sequelize = new Sequelize(
    process.env.DB_NAME,
    process.env.DB_USER,
    process.env.DB_PASS,
    {
        host: process.env.DB_HOST,
        dialect: 'mysql',
    }
);

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
async function testDatabaseConnection() {
    try {
        await sequelize.authenticate();
        console.log("‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.");
    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:", error);
    } finally {
        await sequelize.close();
    }
}

testDatabaseConnection();
–ó–∞–ø—É—Å–∫:

bash
–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å
–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
node tests/databaseTest.js
2. –¢–µ—Å—Ç –º–æ–¥–µ–ª–∏ Slide (slideModelTest.js)
–°–æ–∑–¥–∞—ë—Ç —Ç–µ—Å—Ç–æ–≤—ã–π —Å–ª–∞–π–¥, –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –µ–≥–æ, –∑–∞—Ç–µ–º —É–¥–∞–ª—è–µ—Ç.

javascript
–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å
–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
const { Sequelize, DataTypes } = require('sequelize');
require('dotenv').config();

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
const sequelize = new Sequelize(
    process.env.DB_NAME,
    process.env.DB_USER,
    process.env.DB_PASS,
    {
        host: process.env.DB_HOST,
        dialect: 'mysql',
    }
);

// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ Slide
const Slide = sequelize.define('Slide', {
    title: { type: DataTypes.STRING, allowNull: false },
    filePath: { type: DataTypes.STRING, allowNull: false },
    startDate: { type: DataTypes.DATE, allowNull: false },
    endDate: { type: DataTypes.DATE, allowNull: false },
});

// –§—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–∏
async function testSlideModel() {
    try {
        await sequelize.sync();

        // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–ª–∞–π–¥–∞
        const slide = await Slide.create({
            title: "Test Slide",
            filePath: "/uploads/test.pdf",
            startDate: new Date(),
            endDate: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000),
        });

        console.log("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π —Å–ª–∞–π–¥ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω:", slide.toJSON());

        // –£–¥–∞–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–ª–∞–π–¥–∞
        await slide.destroy();
        console.log("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π —Å–ª–∞–π–¥ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω.");
    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –≤ –º–æ–¥–µ–ª–∏ Slide:", error);
    } finally {
        await sequelize.close();
    }
}

testSlideModel();
–ó–∞–ø—É—Å–∫:

bash
–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å
–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
node tests/slideModelTest.js
3. –¢–µ—Å—Ç API /api/slides (slideApiTest.js)
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç Supertest –∏ Jest –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API.

üìå –ü–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:

bash
–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å
–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
npm install --save-dev jest supertest
–ö–æ–¥:

javascript
–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å
–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
const request = require('supertest');
const express = require('express');
const router = require('../routers/slideRouter'); // –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø—É—Ç—å –≤–µ—Ä–Ω—ã–π

const app = express();
app.use('/api/slides', router);

test("‚úÖ –î–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å –º–∞—Å—Å–∏–≤ —Å–ª–∞–π–¥–æ–≤", async () => {
    const response = await request(app).get('/api/slides');
    expect(response.status).toBe(200);
    expect(Array.isArray(response.body)).toBe(true);
});
–î–æ–±–∞–≤—å—Ç–µ –≤ package.json:

json
–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å
–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
"scripts": {
  "test": "jest"
}
–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞:

bash
–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å
–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
npm test
–¢–µ–ø–µ—Ä—å —É –≤–∞—Å –µ—Å—Ç—å —Ç–µ—Å—Ç—ã –¥–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö, –º–æ–¥–µ–ª–∏ Slide –∏ API /api/slides. üöÄ
–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏—Ö –∑–∞–ø—É—Å—Ç–∏—Ç—å –∏ –¥–∞–π—Ç–µ –∑–Ω–∞—Ç—å, –µ—Å–ª–∏ –µ—Å—Ç—å –æ—à–∏–±–∫–∏! üòä